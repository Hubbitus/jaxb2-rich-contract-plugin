<?xml version="1.0" encoding="UTF-8"?><html lang="de" xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Plugin-Parameter</title>
        <link href="usage.css" rel="stylesheet" type="text/css"/>
    </head>
    <body>
        <section>
            <a name="fluent-builder"/>
            <h1>fluent-builder</h1>
            <p>Generiert einen "fluent builder" für JAXB-Klassen.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="fluent-builder.generateTools"/>-generateTools=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiere Hilfsklassen als Quelltext. Wenn dies ausgeschaltet ist, muss sich das Plugin-JAR zur Laufzeit im Klassenpfad der generierten Klassendefinitionen befinden.</dd>
                <dt>
                    <a name="fluent-builder.narrow"/>-narrow=<span class="choice">{y|n}</span>
                    <span class="default">n</span>
                </dt>
                <dd>Für untergeordnete Knoten im zu kopierenden Objektbaum werden ebenfalls die Copy-Konstruktoren der deklarierten Typen verwendet, soweit diese vorhanden sind und die Typen der entsprechenden Instanzen ebenfalls aus dem XSD-Model generierte Klassen sind. Dies erzeugt eine möglichst "schmale" Kopie des Ausgangsobjekts, was in bestimmten Fällen nützlich sein kann.
Ein Unterknoten, dessen Typ nicht im aktuellen XSD-Modell deklariert ist, wird immer wie bei der 'clone()'-Methode kopiert. Ist diese Option "no", gilt dies auch für generierte Typen.</dd>
                <dt>
                    <a name="fluent-builder.copyPartial"/>-copyPartial=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiert zusätzlich eine 'copyOf()'-Methode mit der sich Objekte partiell kopieren lassen. Dabei wird ein PropertyTree-Objekt mitgegeben, welches die zu kopierenden Knoten des Objektbaumes angibt.</dd>
                <dt>
                    <a name="fluent-builder.selectorClassName"/>-selectorClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">Selector</span>
                </dt>
                <dd>Name der generierten inneren "Selector" Builder-Klasse, die intern zum Aufbau des Property-Baums für das partielle Kopieren benutzt wird. Diese Einstellung wird nur dann berücksichtigt, wenn das "Deep Copy"-Plugin nicht aktiv ist, und "copy-partial=y" ist. Ansonsten gilt die Einstellung des "Deep Copy"-Plugins.</dd>
                <dt>
                    <a name="fluent-builder.rootSelectorClassName"/>-rootSelectorClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">Select</span>
                </dt>
                <dd>Name der generierten inneren "Select" -Klasse, die vom aufrufenden Code als Einstieg in den Aufbau eines Property-Baumes für das partielle Kopieren verwendet werden kann. Diese Einstellung wird nur dann berücksichtigt, wenn das "Deep Copy"-Plugin nicht aktiv ist, und "copy-partial=y" ist. Ansonsten gilt die Einstellung des "Deep Copy"-Plugins.</dd>
                <dt>
                    <a name="fluent-builder.builderClassName"/>-builderClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">Builder</span>
                </dt>
                <dd>Name der generierten inneren Builder-Klasse. Kann hier gesetzt werden, um Namenskonflikte zu lösen.</dd>
                <dt>
                    <a name="fluent-builder.newBuilderMethodName"/>-newBuilderMethodName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">builder</span>
                </dt>
                <dd>Name der generierten statischen Methode zum Erzeugen eines neuen Builders. Kann hier gesetzt werden, um Namenskonflikte zu lösen.</dd>
            </dl>
        </section>
        <section>
            <a name="immutable"/>
            <h1>immutable</h1>
            <p>Veranlasst XJC dazu, die generierten Klassen unveränderlich zu machen.
Alle set-Methoden werden protected gemacht, collections werden als "Collections.unmodifiableCollection" erzeugt.</p>
        </section>
        <section>
            <a name="group-contract"/>
            <h1>group-contract</h1>
            <p>Transformiert XSD &lt;group&gt; und &lt;attributeGroup&gt;-Definitionen in Java "interface" Definitionen und generiert die Klassen, die diese Gruppen nutzen so, dass sie das Interface implementieren.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="group-contract.declareSetters"/>-declareSetters=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Auch die Setter-Methoden in den generierten Interfaces deklarieren. Wenn nein, werden nur Getter deklariert.</dd>
                <dt>
                    <a name="group-contract.declareBuilderInterface"/>-declareBuilderInterface=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Wenn das "fluent builder plugin" (-Xfluent-builder) ebenfalls aktive ist, generiere auch Interfaces für die inneren Builder-Klassen.</dd>
                <dt>
                    <a name="group-contract.upstreamEpisodeFile"/>-upstreamEpisodeFile=<span class="choice">&lt;string&gt;</span>
                    <span class="default">/META-INF/jaxb-interfaces.episode</span>
                </dt>
                <dd>Suche die angegebene "episode"-Datei (Resource-Pfad), um Informationen über interfaces zu erhalten, die in Modulen definiert wurden, von denen dieses hier abhängig ist (siehe "-episode"-Mechanismus in der XJC-Dokumentation).</dd>
                <dt>
                    <a name="group-contract.downstreamEpisodeFile"/>-downstreamEpisodeFile=<span class="choice">&lt;string&gt;</span>
                    <span class="default">/META-INF/jaxb-interfaces.episode</span>
                </dt>
                <dd>Generiere "episode"-Datei für abhängige Module an der angegebene Stelle (Resource-Pfad).</dd>
            </dl>
        </section>
        <section>
            <a name="clone"/>
            <h1>clone</h1>
            <p>Generiert JAXB-Klassen, deren Instanzen mittels der 'clone'-Methode kopiert werden können.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="clone.cloneThrows"/>-cloneThrows=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>'CloneNotSupportedException' in der Methodensignatur von 'clone()' deklarieren (yes), oder 'throws' weglassen und evtl. Exception intern ignorieren (no).</dd>
            </dl>
        </section>
        <section>
            <a name="copy"/>
            <h1>copy</h1>
            <p>Generiert JAXB-Klassen, deren Instanzen mittels einer "createCopy"-Methode oder eines Copy-Konstruktors kopiert werden können.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="copy.partial"/>-partial=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiert zusätzlich eine 'createCopy()'-Methode und einen Konstruktor (wenn "-constructor=yes"), mit dem sich Objekte partiell kopieren lassen. Dabei wird ein PropertyPath-Objekt mitgegeben, welches die zu kopierenden Knoten des Objektbaumes angibt.</dd>
                <dt>
                    <a name="copy.generateTools"/>-generateTools=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiere Hilfsklassen als Quelltext (y). Wenn dies ausgeschaltet ist, muss sich das Plugin-JAR zur Laufzeit im Klassenpfad der generierten Klassendefinitionen befinden.</dd>
                <dt>
                    <a name="copy.constructor"/>-constructor=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Erzeugt einen Copy-Konstruktor für jede generierte Klasse des XSD-Modells.</dd>
                <dt>
                    <a name="copy.narrow"/>-narrow=<span class="choice">{y|n}</span>
                    <span class="default">n</span>
                </dt>
                <dd>Für untergeordnete Knoten im zu kopierenden Objektbaum werden ebenfalls die Copy-Konstruktoren der deklarierten Typen verwendet. soweit diese vorhanden sind und die Typen der entsprechenden Instanzen ebenfalls aus dem XSD-Model generierte Klassen sind. Dies erzeugt eine möglichst "schmale" Kopie des Ausgangsobjekts, was in bestimmten Fällen nützlich sein kann. Ein Unterknoten, dessen Typ nicht im aktuellen XSD-Modell deklariert ist, wird immer wie bei der 'createCopy()'-Methode kopiert. Ist diese Option "no", gilt dies auch für generierte Typen. Standard: no.</dd>
                <dt>
                    <a name="copy.selectorClassName"/>-selectorClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">Selector</span>
                </dt>
                <dd>Name der generierten inneren "Selector" Builder-Klasse, die intern zum Aufbau des Property-Baums für das partielle Kopieren benutzt wird. Diese Einstellung gilt auch für das "Fluent Builder"-Plugin, wenn dieses zusätzlich aktiv ist und dort "copy-partial=y" eingestellt ist.</dd>
                <dt>
                    <a name="copy.rootSelectorClassName"/>-rootSelectorClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">Select</span>
                </dt>
                <dd>Name der generierten inneren "Select" -Klasse, die vom aufrufenden Code als Einstieg in den Aufbau eines Property-Baumes für das partielle Kopieren verwendet werden kann. Diese Einstellung gilt auch für das "Fluent Builder"-Plugin, wenn dieses zusätzlich aktiv ist und dort "copy-partial=y" eingestellt ist.</dd>
            </dl>
        </section>
        <section>
            <a name="constrained-properties"/>
            <h1>constrained-properties</h1>
            <p>Erzeugt die Eigenschaften der generierten Klassen als "Bound Properties" oder "Constrained Properties" wie in der JavaBeans-Spezifikation vorgesehen.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="constrained-properties.constrained"/>-constrained=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Erzeuge "constrained properties", die durch das Werfen einer  Exception eine Änderung ihres Zustandes unterbinden können.</dd>
                <dt>
                    <a name="constrained-properties.bound"/>-bound=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Erzeuge "bound properties", die die Änderung ihres Zustandes als Event weitermelden.</dd>
                <dt>
                    <a name="constrained-properties.setterThrows"/>-setterThrows=<span class="choice">{y|n}</span>
                    <span class="default">n</span>
                </dt>
                <dd>Wenn Constrained Properties verwendet werden, soll eine PropertyVetoException bei unerlaubter Zustandsänderung geworfen werden.
Wenn dies auf "no" gesetzt ist, wird stattdessen eine "RuntimeException" erzeugt.</dd>
                <dt>
                    <a name="constrained-properties.generateTools"/>-generateTools=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiere die Hilfsklassen, die zur Realisierung der nicht-standardkonformen "Collection Changed" events gebraucht werden, als Quelltext.</dd>
            </dl>
        </section>
        <section>
            <a name="meta"/>
            <h1>meta</h1>
            <p>XJC-Plugin zum Erzeugen von Metadaten für eine JAXB-Klasse. Generiert eine innere Klasse mit statischen Feldern, die jeweils Informationen über die einzelnen Eigenschaften enthalten.</p>
            <h2>Options</h2>
            <dl>
                <dt>
                    <a name="meta.generateTools"/>-generateTools=<span class="choice">{y|n}</span>
                    <span class="default">y</span>
                </dt>
                <dd>Generiere die Hilfsklasse zur Darstellung der erweiterten Metadaten als Quelltext.
Wenn hier "n" angegeben wird und "extended=y", so muss das plugin JAR zur Laufzeit im Klassenpfad der client-Anwendung sein.</dd>
                <dt>
                    <a name="meta.extended"/>-extended=<span class="choice">{y|n}</span>
                    <span class="default">n</span>
                </dt>
                <dd>Generiere erweiterte Metadaten für jedes Property: Name, Typ, Multiplizität, Standardwert</dd>
                <dt>
                    <a name="meta.camelCase"/>-camelCase=<span class="choice">{y|n}</span>
                    <span class="default">n</span>
                </dt>
                <dd>Namen der Konstanten wie Feldnamen generieren, nicht nach Java-Konstanten-Konvention.</dd>
                <dt>
                    <a name="meta.metaClassName"/>-metaClassName=<span class="choice">&lt;string&gt;</span>
                    <span class="default">PropInfo</span>
                </dt>
                <dd>Name der generierten inneren Metainfoklasse.</dd>
            </dl>
        </section>
    </body>
</html>
