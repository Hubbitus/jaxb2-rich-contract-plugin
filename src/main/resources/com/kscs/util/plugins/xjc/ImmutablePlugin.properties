usage=Makes XJC generate immutable classes. "set"-methods are being transformed to "protected" access, collections are exposed as "collections.unmodifiableCollection".
error.immutableAndConstrainedProperties="Immutable" plugin cannot be used together with "constrained-properties" plugin. An object can either be immutable, or it can send change notifications.
doc.motivation=Generally it is advisable to make your business classes immutable as much as possible, to minimise side effects and allow for functional programming patterns.
doc.function=This plugin simply makes all "setXXX" methods "protected", thus preventing API consumers to modify state of instances of generated classes after they have been created. This only makes sense together with another plugin that allows for initialization of the instances, like e.g. the included `fluent-builder` plugin. For collection-valued properties, `-Ximmutable` wraps all collections in a `Collections.unmodifiableCollection`, so collections are also made immutable. Because JAXB serialization has a number of constraints regarding the internals of JAXB serializable objects, it wasn't advisable to just remove the setter methods or replace the collections with unmodifiable collections. So, a bit of additional code will be created that leaves the old "mutable" structure of the class intact as much as is needed for JAXB, but modifies the public interface so objects appear immutable to client code.
doc.limitations=* Access level "protected" may not be strict enough to prevent state changes.\n\
  * If you activate plugins like "fluent-api" or the like, these plugins may circumvent the protection provided by the `immutable` plugin.
